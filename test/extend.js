// Generated by CoffeeScript 1.10.0
(function() {
  var Child, Module, Parent, moduleKeywords,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  moduleKeywords = ['extended', 'included'];

  Module = (function() {
    function Module() {}

    Module.extend = function(obj) {
      var key, ref, value;
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((ref = obj.extended) != null) {
        ref.apply(this);
      }
      return this;
    };

    Module.include = function(obj) {
      var key, results, value;
      results = [];
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          results.push(this.prototype[key] = value);
        }
      }
      return results;
    };

    return Module;

  })();

  Parent = (function() {
    function Parent() {}

    Parent.test = function() {
      return console.log("parent");
    };

    return Parent;

  })();

  Child = (function(superClass) {
    extend(Child, superClass);

    function Child() {
      return Child.__super__.constructor.apply(this, arguments);
    }

    Child.one = 1;

    Child.test = function() {
      Child.__super__.constructor.test.call(this);
      return console.log(this.prototype.one);
    };

    Child.test2 = function() {
      return this.test();
    };

    return Child;

  })(Parent);

  Child.test2();

}).call(this);
