// Generated by CoffeeScript 1.10.0
(function() {
  var construct, dict, find, input, log, map, process, separate;

  map = require("./js/map");

  dict = require("./js/dictionary");

  log = function(info) {
    return console.log(info);
  };

  input = "turn on the light, set the brightness to 45 and set the timer to 20";

  separate = function(line) {
    var clauses, pattern, sentence, separators;
    separators = ["and", ","];
    pattern = new RegExp(separators.join("|"));
    clauses = input.split(pattern);
    clauses = clauses.map(function(clause) {
      return clause.trim();
    });
    return sentence = {
      main: clauses[0],
      sub: clauses.slice(1)
    };
  };

  find = {
    verb: function(clause) {
      var entry, match, ref, word;
      ref = dict.verbs;
      for (entry in ref) {
        word = ref[entry];
        match = clause.match(entry);
        if (match != null) {
          return word;
        }
      }
    },
    object: function(clause) {
      var key, match, object;
      for (key in map) {
        object = map[key];
        match = clause.match(object.word);
        if (match != null) {
          return object.word.toString();
        }
      }
    },
    property: function(clause, object) {
      var key, match, obj, property;
      for (key in map) {
        obj = map[key];
        if (obj.word === object) {
          for (property in obj.properties) {
            match = clause.match(property);
            if (match != null) {
              return property;
            }
          }
        }
      }
    },
    value: function(clause, object) {
      var match, value;
      match = clause.match("to");
      if (match != null) {
        value = clause.slice(match.index);
        value = value.replace("to ", "");
        return value;
      }
    }
  };

  construct = {
    set: function(info) {
      var syntax;
      return syntax = info.object + "." + info.property + " = " + info.value;
    }
  };

  process = function(input) {
    var clause, code, i, info, len, lines, property, ref, sentence, value;
    code = [];
    code.push("# " + input);
    sentence = separate(input);
    info = find.verb(sentence.main);
    if (info.object == null) {
      info.object = find.object(sentence.main).toString();
    }
    if (info.property == null) {
      find.property(sentence.main, info.object);
    }

    /*if not info.value?
      find.value(sentence.main, info.object)
     */
    lines = [];
    if (info.type === 'set') {
      lines.push(construct.set(info));
    }
    ref = sentence.sub;
    for (i = 0, len = ref.length; i < len; i++) {
      clause = ref[i];
      property = find.property(clause, info.object);
      if (property != null) {
        info.property = property;
      }
      value = find.value(clause, info.object);
      if (value != null) {
        info.value = value;
      }
      if (info.type === 'set') {
        lines.push(construct.set(info));
      }
    }
    code.push(lines.join("\n"));
    return code.join("\n");
  };

  log(process(input));

}).call(this);
