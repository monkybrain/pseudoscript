// Generated by CoffeeScript 1.10.0
(function() {
  var Scope, Store, Verb,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Verb = require("./verb");

  Scope = require("./../../parts/scope");


  /* NOT WORKING PROPERLY */

  Store = (function(superClass) {
    extend(Store, superClass);

    function Store() {
      return Store.__super__.constructor.apply(this, arguments);
    }

    Store.lexical = {
      base: 'store',
      synonyms: ['store']
    };

    Store.test = function(text) {
      var key, match, pattern;
      pattern = /(\bstore)(\s+?\bas\b\s+?'(.*)')*/;
      match = text.match(pattern);
      if (match != null) {
        key = match[3];
        return {
          type: 'verb',
          verb: 'store',
          key: key
        };
      }
    };

    Store.syntax = function(phrase) {
      var syntax;
      syntax = ["# Storing"];
      if (phrase.key != null) {
        syntax.push(".then (response) -> Storage.set '" + phrase.key + "', response['" + phrase.key + "']\n");
      }
      return syntax;
    };

    return Store;

  })(Verb);

  module.exports = Store;

}).call(this);
