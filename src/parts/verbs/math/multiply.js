// Generated by CoffeeScript 1.10.0
(function() {
  var Math, Multiply, Scope,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Math = require("./math");

  Scope = require("../../../parts/scope");

  Multiply = (function(superClass) {
    extend(Multiply, superClass);

    function Multiply() {
      return Multiply.__super__.constructor.apply(this, arguments);
    }

    Multiply.lexical = {
      base: 'multiply',
      synonyms: ['multiply']
    };

    Multiply.test = function(text) {
      var i, len, match, operands, pattern, segment, split;
      pattern = /(\bmultiply\b)\s+?(.*)\bby\b(.*)/;
      match = text.match(pattern);
      operands = [];
      if (match) {
        operands.push(match[2]);
        split = this.split(match[0]);
        for (i = 0, len = split.length; i < len; i++) {
          segment = split[i];
          operands.push(this.getOperand(segment));
        }
        operands = operands.map(function(operand) {
          return operand.trim();
        });
        return {
          type: 'verb',
          verb: 'multiply',
          operands: operands
        };
      }
    };

    Multiply.syntax = function(phrase) {
      var operands, syntax;
      operands = phrase.operands.map((function(_this) {
        return function(operand) {
          if (!_this.isExpression(operand)) {
            return "operands." + operand;
          } else {
            return operand;
          }
        };
      })(this));
      syntax = [];
      syntax.push("# Multiplying");
      operands = operands.join(", ");
      syntax.push(".then (operands) -> Util.math.multiply [" + operands + "]\n");
      return syntax;
    };

    return Multiply;

  })(Math);

  module.exports = Multiply;

}).call(this);
