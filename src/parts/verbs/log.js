// Generated by CoffeeScript 1.10.0

/* VERB: LOG */

(function() {
  var Log, Scope, Verb, modules,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  modules = require("../../modules/modules");

  Verb = require("../../parts/verbs/verb");

  Scope = require("../../parts/scope");

  Log = (function(superClass) {
    extend(Log, superClass);

    function Log() {
      return Log.__super__.constructor.apply(this, arguments);
    }

    Log.lexical = {
      base: 'log',
      synonyms: ['log']
    };

    Log.test = function(text) {
      var match, pattern, properties;
      pattern = /\blog\b(\s+?(.*))*/;
      match = text.match(pattern);
      if (match != null) {
        properties = match[2];
        if (properties != null) {
          properties = this.split(properties);
        }
        return {
          type: 'verb',
          verb: 'log',
          properties: properties
        };
      }
    };

    Log.syntax = function(phrase) {
      var i, len, property, ref, syntax;
      syntax = [];
      syntax.push("# Logging");
      if (phrase.properties == null) {
        syntax.push(".then (response) -> console.log response\n");
      } else {
        syntax.push(".then ->");
        ref = phrase.properties;
        for (i = 0, len = ref.length; i < len; i++) {
          property = ref[i];
          syntax.push("  console.log \"" + property + ": \" + Globals['" + property + "']");
        }
        syntax[syntax.length - 1] = syntax[syntax.length - 1] + "\n";
      }
      return syntax;
    };

    return Log;

  })(Verb);

  module.exports = Log;

}).call(this);
