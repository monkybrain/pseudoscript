// Generated by CoffeeScript 1.10.0

/* VERB: LOG */

(function() {
  var Find, Log, Scope, Verb, modules,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  modules = require("../../modules/modules");

  Verb = require("../../parts/verbs/verb");

  Scope = require("../../parts/scope");

  Find = require("../../core/find");

  Log = (function(superClass) {
    extend(Log, superClass);

    function Log() {
      return Log.__super__.constructor.apply(this, arguments);
    }

    Log.lexical = {
      base: 'log',
      synonyms: ['log']
    };

    Log.test = function(text) {
      var i, len, match, parameters, pattern, properties, property, result, strings;
      pattern = /\blog\b(\s+?(.*))*/;
      match = text.match(pattern);
      if (match != null) {
        result = false;
        parameters = match[2];
        if (parameters != null) {
          parameters = this.split(parameters);
          properties = parameters.filter(function(parameter) {
            return parameter.indexOf("'") === -1;
          });
          if (properties != null) {
            for (i = 0, len = properties.length; i < len; i++) {
              property = properties[i];
              if (property === 'result') {
                properties.splice(properties.indexOf('result', 1));
                result = true;
                break;
              }
            }
            if (properties.length === 0) {
              properties = void 0;
            }
          }
          strings = Find.references(parameters.join(" "));
        } else {
          result = true;
        }
        return {
          type: 'verb',
          verb: 'log',
          properties: properties,
          strings: strings,
          result: result
        };
      }
    };

    Log.syntax = function(phrase, level) {
      var indent, props, string, strings, syntax;
      syntax = [];
      if (level !== 0) {
        syntax.push("# Log");
        syntax.push(".then (response) ->");
        indent = "  ";
      } else {
        indent = "";
      }
      if (phrase.strings != null) {
        strings = phrase.strings.map(function(string) {
          return "'" + string + "'";
        });
        string = strings.join(", ");
        syntax.push(indent + "# Log strings");
        syntax.push(indent + ("Util.log string for string in [" + strings + "]"));
      }
      if (phrase.properties != null) {
        props = phrase.properties.map(function(property) {
          return "'" + property + "'";
        });
        props = props.join(", ");
        syntax.push(indent + "# Log properties");
        syntax.push(indent + ("Util.log \"\#{key}: \#{Globals[key]}\" for key in [" + props + "]\n"));
      }
      if (phrase.result) {
        syntax.push(indent + "# Log response");
        syntax.push(indent + "Util.log response");
      }
      return syntax;
    };

    return Log;

  })(Verb);

  module.exports = Log;

}).call(this);
