// Generated by CoffeeScript 1.10.0

/* VERB: LOG */

(function() {
  var Log, Scope, Verb, modules,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  modules = require("../../modules/modules");

  Verb = require("../../parts/verbs/verb");

  Scope = require("../../parts/scope");

  Log = (function(superClass) {
    extend(Log, superClass);

    function Log() {
      return Log.__super__.constructor.apply(this, arguments);
    }

    Log.lexical = {
      base: 'log',
      synonyms: ['log']
    };

    Log.test = function(text) {
      var match, pattern, split;
      pattern = /\blog\b.*/g;
      match = text.match(pattern);
      if (match) {
        split = this.split(match[0]);
        return {
          type: 'verb',
          verb: 'log'
        };
      }
    };

    Log.syntax = function(phrase) {
      var syntax;
      syntax = [];
      syntax.push("# Logging");
      syntax.push(".then (response) ->");
      syntax.push("  console.log \"\#{response.ref} (\#{response.object})\"");
      syntax.push("  console.log \"  \#{key}: \#{value}\" for key, value of response.properties");
      return syntax;
    };

    return Log;

  })(Verb);

  module.exports = Log;

}).call(this);
