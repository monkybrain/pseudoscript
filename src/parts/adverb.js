// Generated by CoffeeScript 1.10.0
(function() {
  var Adverb;

  Adverb = (function() {
    function Adverb(dict) {
      this.dict = dict;
    }

    Adverb.prototype.test = function(text) {
      var adverb, result;
      adverb = this.find(text);
      if (adverb != null) {
        result = {
          type: adverb
        };
        if (adverb === 'delay' || adverb === 'interval') {
          result.time = this.interval(text);
        }
        if (adverb === 'at') {
          result.time = this.specific(text);
        }
        return result;
      }
    };

    Adverb.prototype.find = function(text) {
      var def, entry, match, ref;
      ref = this.dict.adverbs;
      for (entry in ref) {
        def = ref[entry];
        match = text.match(def.pattern);
        if (match != null) {
          return entry;
        }
      }
    };

    Adverb.prototype.time2ms = function(time) {
      var milliseconds;
      milliseconds = 0;
      if (time.days != null) {
        milliseconds += time.days * 1000 * 60 * 60 * 24;
      }
      if (time.hours != null) {
        milliseconds += time.hours * 1000 * 60 * 60;
      }
      if (time.minutes != null) {
        milliseconds += time.minutes * 1000 * 60;
      }
      if (time.seconds != null) {
        milliseconds += time.seconds * 1000;
      }
      if (time.milliseconds != null) {
        milliseconds += time.milliseconds;
      }
      return milliseconds;
    };

    Adverb.prototype.interval = function(text) {
      var def, entry, i, index, j, k, len, len1, len2, match, matches, pattern, ref, ref1, segment, segments, string, time, unit, value;
      time = {};
      ref = this.dict.units.time.words;
      for (entry in ref) {
        def = ref[entry];
        ref1 = def.patterns;
        for (i = 0, len = ref1.length; i < len; i++) {
          pattern = ref1[i];
          matches = text.match(pattern);
          if (matches != null) {
            for (j = 0, len1 = matches.length; j < len1; j++) {
              match = matches[j];
              unit = entry;
              value = match.match(/\d+/g)[0];
              if (time[unit] != null) {
                time[unit] += value;
              } else {
                time[unit] = value;
              }
            }
          }
        }
      }
      if (Object.keys(time).length === 0) {
        pattern = /(\d+(:\d+)*)/g;
        match = text.match(pattern);
        if (match != null) {
          string = match[0];
          segments = string.split(":").reverse();
          for (index = k = 0, len2 = segments.length; k < len2; index = ++k) {
            segment = segments[index];
            unit = this.dict.units.time.order.interval[index];
            value = segment;
            time[unit] = value;
          }
        }
      }
      if (Object.keys(time).length === 0) {
        return null;
      } else {
        return this.time2ms(time);
      }
    };

    Adverb.prototype.specific = function(text) {
      var datetime, i, index, len, match, segment, segments, string, time, twentyfour, unit, value;
      datetime = null;
      match = text.match(/\b(pm)|(am)\b/g);
      twentyfour = match != null ? false : true;
      match = text.match(/(\d+(:\d+)*)/g);
      if (match != null) {
        time = {};
        string = match[0];
        segments = string.split(":").reverse();
        for (index = i = 0, len = segments.length; i < len; index = ++i) {
          segment = segments[index];
          unit = this.dict.units.time.order.specific[index];
          value = segment;
          time[unit] = value < 10 ? "0" + value : value;
        }
        datetime = new Date().toISOString();
        datetime = datetime.slice(0, datetime.indexOf("T" + 1));
        if (time.minutes == null) {
          time.minutes = '00';
        }
        if (time.seconds == null) {
          time.seconds = '00';
        }
        datetime = datetime + "T" + time.hours + ":" + time.minutes + ":" + time.seconds;
      }
      return datetime;
    };

    return Adverb;

  })();

  module.exports = Adverb;

}).call(this);
