// Generated by CoffeeScript 1.10.0
(function() {
  var Preprocessor, dict, modules,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  dict = require("./../dictionaries/dictionary");

  modules = require("./../modules/modules");

  Preprocessor = (function() {
    function Preprocessor() {}

    Preprocessor.numbers = dict.preprocessor.numbers;


    /* SINGLE LINE OPERATIONS */

    Preprocessor.trim = function(line) {
      return line.trim();
    };

    Preprocessor.replace = function(line) {
      var i, len, num, ref, word, words;
      ref = this.numbers;
      for (num in ref) {
        words = ref[num];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          line = line.replace(word, num);
        }
      }
      return line;
    };

    Preprocessor.lowercase = function(line) {
      return line.toLowerCase();
    };

    Preprocessor.comments = function(line) {
      var index;
      index = line.indexOf("#");
      if (index !== -1) {
        return line.slice(0, index);
      } else {
        return line;
      }
    };


    /* MULTILINE OPERATIONS */

    Preprocessor.split = function(file) {
      return file.split(/(\n)|(\.)/g);
    };

    Preprocessor.filter = function(lines) {
      return lines.filter(function(line) {
        var patterns;
        patterns = ['', void 0, null, "\.", "\n"];
        if (indexOf.call(patterns, line) >= 0) {
          return false;
        } else {
          return true;
        }
      });
    };


    /* PHRASES */

    Preprocessor.phrases = function(line) {
      var i, j, len, len1, module, object, pattern, phrase, ref, translation;
      for (i = 0, len = modules.length; i < len; i++) {
        module = modules[i];
        if (module.lexical.phrases != null) {
          ref = module.lexical.phrases;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            phrase = ref[j];
            pattern = new RegExp(phrase.pattern.replace("<object>", "(\\w*\\s*)*\\'((\\w+)?(\\s+?\\w+?)*)'"));
            if (typeof match !== "undefined" && match !== null) {
              console.log(match);
              object = match[2];
              translation = phrase.verb + " '" + object + "' " + phrase.property + " " + phrase.value;
              line = line.replace(pattern, translation);
            }
          }
        }
      }
      return line;
    };

    Preprocessor.process = function(file) {
      var lines;
      lines = this.filter(this.split(file));
      lines = lines.map((function(_this) {
        return function(line) {
          return line = _this.replace(_this.trim(_this.lowercase(_this.comments(line))));
        };
      })(this));
      return this.filter(lines);

      /*lines = lines.map (line) =>
        @phrases line
       */
    };

    return Preprocessor;

  })();

  module.exports = Preprocessor;

}).call(this);
