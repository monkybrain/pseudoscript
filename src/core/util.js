// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, Util,
    slice = [].slice;

  Promise = require("promise");

  Util = (function() {
    function Util() {}

    Util.regex = {
      group: function(expressions) {
        var pattern;
        pattern = expressions.map(function(expression) {
          return "(" + expression + ")";
        });
        return pattern = pattern.join("|");
      },
      enclose: function(expression) {
        return "(" + expression + ")";
      },
      bound: function(pattern) {
        return new RegExp("\\b(" + pattern + ")\\b", "g");
      }
    };

    Util.random = function(options) {
      return Math.floor(options.min + Math.random() * options.max);
    };

    Util.error = function(err) {
      return console.error(err);
    };

    Util.math = {
      multiply: function() {
        var operands;
        operands = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return new Promise(function(resolve, reject) {
          return resolve(operands.reduce(function(prev, curr) {
            return prev * curr;
          }));
        });
      },
      divide: function(operands) {
        return new Promise(function(resolve, reject) {
          return resolve(operands.reduce(function(prev, curr) {
            return prev / curr;
          }));
        });
      },
      add: function(operands) {
        return new Promise(function(resolve, reject) {
          return resolve(operands.reduce(function(prev, curr) {
            return prev + curr;
          }));
        });
      },
      subtract: function(operands) {
        return new Promise(function(resolve, reject) {
          return resolve(operands.reduce(function(prev, curr) {
            return prev - curr;
          }));
        });
      }
    };

    Util.promise = function(object) {
      return new Promise(function(resolve, reject) {
        return resolve(object);
      });
    };

    return Util;

  })();

  module.exports = Util;

}).call(this);
