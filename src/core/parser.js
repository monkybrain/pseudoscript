// Generated by CoffeeScript 1.10.0
(function() {
  var Parser, Parts, Scope, Util, error, log, tools;

  tools = require("monky-tools");

  Parts = require("./../src/parts/parts");

  Scope = require("./../src/parts/scope");

  Util = require("./util");

  log = tools.console.log;

  error = tools.console.error;

  Parser = (function() {
    function Parser() {}

    Parser.process = function(line) {
      return line = line.toLowerCase();
    };

    Parser.phrasify = function(line) {
      var i, index, indices, j, keywords, len, pattern, phrases, result;
      keywords = Util.regex.group(Parts.keywords);
      pattern = Util.regex.bound(keywords);
      indices = [];
      while (true) {
        result = pattern.exec(line);
        if (result != null) {
          indices.push(result.index);
        } else {
          break;
        }
      }
      indices.sort(function(a, b) {
        return a > b;
      });
      phrases = [];
      for (i = j = 0, len = indices.length; j < len; i = ++j) {
        index = indices[i];
        if (indices[i + 1] == null) {
          phrases.push(line.slice(index));
          break;
        } else {
          phrases.push(line.slice(index, indices[i + 1]));
        }
      }
      return phrases;
    };

    Parser.parse = function(line) {
      var adverb, j, k, l, len, len1, len2, phrase, phrases, ref, ref1, result, segments, verb;
      line = this.process(line);
      segments = [];
      phrases = this.phrasify(line);
      for (j = 0, len = phrases.length; j < len; j++) {
        phrase = phrases[j];

        /* ADVERB */
        ref = Parts.adverbs;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          adverb = ref[k];
          result = adverb.test(phrase);
          if (result != null) {
            segments.push(result);
          }
        }

        /* VERBS */
        ref1 = Parts.verbs;
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          verb = ref1[l];
          result = verb.test(phrase);
          if (result != null) {
            Scope.type = 'verb';
            Scope.subtype = verb.lexical.base;
            segments.push(result);
          }
        }
      }
      return segments;
    };

    return Parser;

  })();

  module.exports = Parser;

}).call(this);
