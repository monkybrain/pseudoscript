class Programmer

  constructor: (map) ->
    @map = map

  capitalize: (string) ->
    string = string[0].toUpperCase() + string[1..]

  indent: (string, level) ->
    level = if level? then level else 0
    indent = Array(level+1).join " "
    string = indent + string

  convertTime: (value, unit) ->

    if unit is 'milliseconds'
      return value

    if unit is 'seconds'
      return value * 1000

    if unit is 'minutes'
      return value * 1000 * 60

    if unit is 'hours'
      return value * 1000 * 60 * 60

    if unit is 'days'
      return value * 1000 * 60 * 60 * 24

  process: (script) ->

    # Empty syntax container
    syntax = []

    indent = 2

    # Loop throught operations in script
    for operation in script

      if operation.type is 'adverbial phrase'

        adverb = operation.adverb

        if adverb is 'delay'

          value = operation.value
          unit = operation.unit

          milliseconds = @convertTime operation.value, operation.unit

          syntax.push @indent "\n  # Setting timeout to #{milliseconds} ms"

          syntax.push @indent "setTimeout () ->\n", indent

          indent += 2

          closeAdverbWithValue = milliseconds

        if adverb is 'interval'

          value = operation.value
          unit = operation.unit

          milliseconds = @convertTime operation.value, operation.unit

          syntax.push @indent "\n  # Setting interval to #{milliseconds} ms"

          syntax.push @indent "setInterval () ->\n", indent

          indent += 2

          closeAdverbWithValue = milliseconds

      if operation.type is 'event phrase'

        event = operation.event
        ref = operation.object.ref
        type = operation.object.type

        console.log operation

        if ref?
          syntax.push @indent "\n  # Setting callback for event '#{event}' of '#{ref}'", indent
          syntax.push @indent "Objekt.get('#{ref}').on '#{event}', () ->\n", indent

        else if type?
          syntax.push @indent "\n  # Setting callback for event '#{event}' of current #{type}", indent
          syntax.push @indent "#{type}.get().on '#{event}', () ->\n", indent

        indent += 2

        closeEvent = true

      if operation.type is 'verb phrase'

        verb = operation.verb
        if operation.object.ref?
          ref = operation.object.ref
        # TYPE: Capitalize (for Class name) - TODO: BEAUTIFY!
        if operation.object.type?
          type = @capitalize(operation.object.type)
        object = operation.object
        property = operation.property
        # VALUE: If not number -> add quotes
        value = if isNaN operation.value then "'#{operation.value}'" else operation.value

        if verb is 'create'

          # Add code
          if ref?
            syntax.push @indent "# Create #{type} called '#{ref}'", indent
            syntax.push @indent "new #{type}('#{ref}', photon)\n", indent
          else
            syntax.push @indent "# Create anonymous #{type}", indent
            syntax.push @indent "new #{type}(null, photon)\n", indent

        if verb is 'set'

          if ref?
            syntax.push @indent "# Set the property '#{property}' of '#{ref}' to #{value}", indent
            syntax.push @indent "Objekt.get('#{ref}').set('#{property}', #{value})\n", indent
          else if type?
            syntax.push @indent "# Set the property '#{property}' of current #{type}", indent
            syntax.push @indent "#{type}.get().set('#{property}', #{value})\n", indent


        if verb is 'increase'

          # Add autogenerated comment
          syntax.push "\n" + @indent "# Increasing the property '#{property}' of '#{ref}' by #{value}", indent

          # Add code
          syntax.push @indent + "#{type}.get('#{ref}').inc('#{property}', #{value})", indent

        if verb is 'decrease'

          # Add autogenerated comment
          syntax.push "\n" + @indent "# Decreasing the property '#{property}' of '#{ref}' by #{value}", indent

          # Add code
          syntax.push @indent "#{type}.get('#{ref}').dec('#{property}', #{value})", indent

        if verb is 'do'

          # Add autogenerated comment TODO: FIX SO THIS ACTUALLY REFLECTS THE ACTION!
          syntax.push @indent "# Blink #{value} times", indent

          # Add code
          syntax.push @indent "#{type}.get('#{ref}').do('blink', #{value})\n", indent

        if verb is 'log'

          # Add autogenerated comment TODO: FIX SO THIS ACTUALLY REFLECTS THE ACTION!
          syntax.push "\n" + @indent "# Logging", indent

          # Add code
          syntax.push @indent, "console.log #{type}.get('#{ref}')", indent

    if closeAdverbWithValue?
      indent -= 2
      syntax.push @indent(", " + closeAdverbWithValue, indent) + "\n"

    if closeEvent?
      indent -= 2

    syntax.join "\n"

  wrap: (code) ->
    output = []
    output.push "map = require '../src/modules/base'"
    output.push "Objekt= map.Objekt"
    output.push "Room = map.Room"
    output.push "Light = map.Light"
    output.push "Button = map.Button"
    output.push "\n"
    output.push "Photon = require '../src/photon'"
    output.push "photon = new Photon()\n"
    output.push "console.log '# Running script #'"

    output.push "photon.connect()\n.then () ->"
    output.push "  console.log 'Connected!'\n"
    output.push code
    # output.push @indent "console.log '# End of script #'", 2
    output.join "\n"

module.exports = Programmer