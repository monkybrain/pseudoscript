// Generated by CoffeeScript 1.10.0
(function() {
  var Finder;

  Finder = (function() {
    Finder.prototype.capitalize = function(string) {
      return string = string[0].toUpperCase() + string.slice(1);
    };

    function Finder(dictionary, map) {
      this.dict = dictionary;
      this.map = map;
    }

    Finder.prototype.adverb = function(clause) {
      var definition, entry, match, ref1;
      ref1 = this.dict.adverbs;
      for (entry in ref1) {
        definition = ref1[entry];
        match = clause.match(new RegExp(entry));
        if (match != null) {
          return definition;
        }
      }
    };

    Finder.prototype.event = function(clause) {
      var k, key, match, object, ref, ref1, ref2, v, value;
      match = clause.match(new RegExp(this.dict.event));
      if (match != null) {
        object = {};
        ref = this.reference(clause);
        if (ref != null) {
          object.ref = ref;
        }
        if (ref == null) {
          object.type = this.capitalize(this.object(clause));
        }
        ref1 = this.map;
        for (key in ref1) {
          value = ref1[key];
          if (value.events != null) {
            ref2 = value.events;
            for (k in ref2) {
              v = ref2[k];
              match = clause.match(k);
              if (match != null) {
                return {
                  object: object,
                  event: v.event
                };
              }
            }
          }
        }
      }
    };

    Finder.prototype.verb = function(clause) {
      var definition, entry, match, ref1;
      ref1 = this.dict.verbs;
      for (entry in ref1) {
        definition = ref1[entry];
        match = clause.match(new RegExp(entry));
        if (match != null) {
          return definition;
        }
      }
    };

    Finder.prototype.object = function(clause) {
      var key, match, object, ref1;
      ref1 = this.map;
      for (key in ref1) {
        object = ref1[key];
        match = clause.match(object.word);
        if (match != null) {
          return object.word;
        }
      }
    };

    Finder.prototype.property = function(clause, object) {
      var key, match, obj, property, ref1;
      ref1 = this.map;
      for (key in ref1) {
        obj = ref1[key];
        for (property in obj.properties) {
          match = clause.match(property);
          if (match != null) {
            return property;
          }
        }
      }
    };

    Finder.prototype.value = function(clause) {
      var match, pattern, value, verb;
      verb = this.verb(clause);
      if (verb != null) {
        if (verb.value != null) {
          return verb.value;
        }
      }
      pattern = new RegExp("(to )|(by )");
      match = clause.match(pattern);
      if (match != null) {
        value = clause.slice(match.index);
        value = value.replace(match[0], "");
        value = value.split(" ")[0];
        return value;
      }
      pattern = /\d+ time(s)|( )/g;
      match = pattern.exec(clause);
      if (match != null) {
        value = clause.slice(match.index);
        value = value.replace("times", "");
        if (!isNaN(parseInt(value))) {
          value = parseInt(value);
        }
        return value;
      }
    };

    Finder.prototype.conditional = function(clause) {
      var k, match, pattern, ref1, v;
      ref1 = this.dict.conditionals;
      for (k in ref1) {
        v = ref1[k];
        pattern = new RegExp(k);
        match = clause.match(pattern);
        if (match != null) {
          return {
            type: v.type
          };
        }
      }
    };

    Finder.prototype.unit = function(clause) {
      var definition, entry, match, ref1;
      ref1 = this.dict.units;
      for (entry in ref1) {
        definition = ref1[entry];
        match = clause.match(definition.pattern);
        if (match != null) {
          return entry;
        }
      }
    };

    Finder.prototype.reference = function(clause) {
      var end, indices, match, pattern, reference, start;
      pattern = /"|'/g;
      indices = [];
      while (true) {
        match = pattern.exec(clause);
        if (match != null) {
          indices.push(match.index);
        } else {
          break;
        }
      }
      if (indices.length > 0) {
        start = indices[0] + 1;
        end = indices[1];
        reference = clause.slice(start, end);
      }
      return reference;
    };

    return Finder;

  })();

  module.exports = Finder;

}).call(this);
