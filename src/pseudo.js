#! /usr/bin/env node

// Generated by CoffeeScript 1.10.0
(function() {
  var Assembler, Parser, Photon, argv, assembler, cleanup, code, dictionary, err, error, error1, file, filename, fs, i, index, j, len, len1, line, lines, log, map, output, parser, script, segment, segments, shell, util;

  fs = require("fs");

  util = require("util");

  argv = require("yargs").argv;

  shell = require("shelljs");

  log = require("monky-tools").console.log;

  error = require("monky-tools").console.error;

  dictionary = require("./dictionaries/base");

  map = require("./modules/base");

  Parser = require("./parser");

  Assembler = require("./assembler");

  Photon = require("./photon");

  parser = new Parser(map);

  assembler = new Assembler(map);

  if (argv._[0] != null) {
    filename = argv._[0];
  } else {
    error("Error: no input!");
    return;
  }

  try {
    file = fs.readFileSync(filename, "utf8");
  } catch (error1) {
    err = error1;
    error("Error: could not open " + filename);
    return;
  }

  lines = file.split(/(\n)|(\.)/g);

  lines = lines.filter(function(line) {
    if (line === '') {
      return false;
    } else if (line === '.') {
      return false;
    } else if (line === '\n') {
      return false;
    } else if (line == null) {
      return false;
    } else {
      return true;
    }
  });

  lines = lines.map(function(line) {
    var index;
    index = line.indexOf("#");
    if (index !== -1) {
      line = line.slice(0, index);
    }
    return line;
  });

  lines = lines.filter(function(line) {
    return line !== '';
  });

  lines = lines.map(function(line) {
    return line.trim();
  });

  segments = [];

  for (i = 0, len = lines.length; i < len; i++) {
    line = lines[i];
    segments.push(parser.parse(line));
  }

  console.log(segments);

  return;

  if (argv.s != null) {
    console.log(util.inspect(segments, false, 4));
  }

  code = '';

  for (j = 0, len1 = segments.length; j < len1; j++) {
    segment = segments[j];
    code += assembler.process(segment);
  }

  script = assembler.wrap(code);

  index = filename.lastIndexOf('.');

  output = filename.slice(0, index) + ".coffee";

  if (argv.l != null) {
    log(script);
  }

  script.to(output);

  cleanup = function() {
    if (argv.c == null) {
      return shell.rm(output);
    }
  };

  if (argv.r != null) {
    shell.exec("coffee " + output, function() {
      return cleanup();
    });
  } else {
    cleanup();
  }

}).call(this);
