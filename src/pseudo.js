#! /usr/bin/env node

// Generated by CoffeeScript 1.10.0
(function() {
  var Assembler, Parser, Photon, Preprocessor, argv, cleanup, code, err, error, error1, file, filename, fs, i, index, len, lines, log, modules, output, script, segment, segments, shell, util;

  fs = require("fs");

  util = require("util");

  argv = require("yargs").argv;

  shell = require("shelljs");

  log = require("monky-tools").console.log;

  error = require("monky-tools").console.error;

  modules = require("./modules/modules");

  Parser = require("./parser");

  Assembler = require("./assembler");

  Photon = require("./photon");

  Preprocessor = require("./preprocessor");

  if (argv._[0] != null) {
    filename = argv._[0];
  } else {
    error("Error: no input!");
    return;
  }

  try {
    file = fs.readFileSync(filename, "utf8");
  } catch (error1) {
    err = error1;
    error("Error: could not open " + filename);
    return;
  }


  /*
  lines = lines.filter (line) ->
    if line is '' then return false
    else if line is '.' then return false
    else if line is '\n' then return false
    else if not line? then return false
    else return true
   */


  /* PREPROCESSOR */

  lines = Preprocessor.process(file);


  /* PARSER */

  segments = lines.map(function(line) {
    return Parser.parse(line);
  });

  if (argv.s != null) {
    console.log(util.inspect(segments, false, 8));
  }


  /* ASSEMBLER */

  code = [];

  for (i = 0, len = segments.length; i < len; i++) {
    segment = segments[i];
    code.push(Assembler.parse(segment));
  }

  console.log(code.join("\n"));

  return;

  script = assembler.wrap(code);

  index = filename.lastIndexOf('.');

  output = filename.slice(0, index) + ".coffee";

  if (argv.l != null) {
    log(script);
  }

  script.to(output);

  cleanup = function() {
    if (argv.c == null) {
      return shell.rm(output);
    }
  };

  if (argv.r != null) {
    shell.exec("coffee " + output, function() {
      return cleanup();
    });
  } else {
    cleanup();
  }

}).call(this);
