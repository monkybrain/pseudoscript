#! /usr/bin/env node

// Generated by CoffeeScript 1.10.0
(function() {
  var Assembler, Parser, Photon, Preprocessor, argv, assembler, cleanup, code, err, error, error1, file, filename, fs, i, index, len, lines, log, modules, output, script, segment, segments, shell, util;

  fs = require("fs");

  util = require("util");

  argv = require("yargs").argv;

  shell = require("shelljs");

  log = require("monky-tools").console.log;

  error = require("monky-tools").console.error;

  modules = require("./modules/modules");

  Parser = require("./parser");

  Assembler = require("./assembler");

  Photon = require("./photon");

  Preprocessor = require("./preprocessor");

  assembler = new Assembler(modules);

  if (argv._[0] != null) {
    filename = argv._[0];
  } else {
    error("Error: no input!");
    return;
  }

  try {
    file = fs.readFileSync(filename, "utf8");
  } catch (error1) {
    err = error1;
    error("Error: could not open " + filename);
    return;
  }

  lines = file.split(/(\n)|(\.)/g);

  lines = lines.filter(function(line) {
    if (line === '') {
      return false;
    } else if (line === '.') {
      return false;
    } else if (line === '\n') {
      return false;
    } else if (line == null) {
      return false;
    } else {
      return true;
    }
  });

  lines = lines.map(function(line) {
    var index;
    index = line.indexOf("#");
    if (index !== -1) {
      line = line.slice(0, index);
    }
    return line;
  });

  lines = lines.filter(function(line) {
    return line !== '';
  });

  lines = lines.map(function(line) {
    line = Preprocessor.process(line);
    return line.trim();
  });

  segments = lines.map(function(line) {
    return Parser.parse(line);
  });

  console.log(util.inspect(segments, false, 8));

  return;

  if (argv.s != null) {
    console.log(util.inspect(segments, false, 4));
  }

  code = '';

  for (i = 0, len = segments.length; i < len; i++) {
    segment = segments[i];
    code += assembler.process(segment);
  }

  script = assembler.wrap(code);

  index = filename.lastIndexOf('.');

  output = filename.slice(0, index) + ".coffee";

  if (argv.l != null) {
    log(script);
  }

  script.to(output);

  cleanup = function() {
    if (argv.c == null) {
      return shell.rm(output);
    }
  };

  if (argv.r != null) {
    shell.exec("coffee " + output, function() {
      return cleanup();
    });
  } else {
    cleanup();
  }

}).call(this);
