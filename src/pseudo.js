#! /usr/bin/env node

// Generated by CoffeeScript 1.10.0

/* IMPORTS */

(function() {
  var Assembler, Parser, Preprocessor, argv, code, err, error, error1, file, filename, fs, help, i, index, len, lines, log, segment, segments, shell, util;

  fs = require("fs");

  util = require("util");

  argv = require("yargs").argv;

  shell = require("shelljs");

  log = require("monky-tools").console.log;

  error = require("monky-tools").console.error;

  Parser = require("./core/parser");

  Assembler = require("./core/assembler");

  Preprocessor = require("./core/preprocessor");


  /* SCRIPT */

  if ((argv.h != null) || (argv.help != null)) {
    help = [];
    help.push("");
    help.push("### pseudoscript v 0.1 ###\n");
    help.push("  Usage: pseudo [input file] [options]\n");
    help.push("    -s (--segments)\tshow deconstructed segments (mainly for debugging purposes)");
    help.push("    -c (--compile)\tshow compiled CoffeeScript source");
    help.push("    -r (--run)\t\trun script");
    help.push("    -o (--output)\tcompile to file ('--output temp.coffee')");
    help.push("");
    console.log(help.join("\n"));
    process.exit();
    return;
  }

  if (argv._[0] != null) {
    filename = argv._[0];
  } else {
    error("Error: no input!");
    return;
  }

  try {
    file = fs.readFileSync(filename, "utf8");
  } catch (error1) {
    err = error1;
    error("Error: could not open " + filename);
    return;
  }

  lines = Preprocessor.process(file);

  segments = lines.map(function(line) {
    return Parser.parse(line);
  });

  code = segments.map(function(segment) {
    return Assembler.parse(segment);
  });

  code = Assembler.wrap(code);

  code = code.join("\n");

  if ((argv.s != null) || (argv.segments != null)) {
    for (index = i = 0, len = segments.length; i < len; index = ++i) {
      segment = segments[index];
      console.log(("\nLine " + (index + 1) + ":\n") + util.inspect(segment, false, 8));
    }
    console.log("\n");
  }

  if ((argv.c != null) || (argv.compile != null)) {
    console.log(code);
  }

  if ((argv.o != null) || (argv.output != null)) {
    if (argv.o != null) {
      if (typeof argv.o !== 'string') {
        error("Error! No output file name");
      } else {
        code.to(argv.o);
      }
    } else if (argv.output != null) {
      code.to(argv.output);
    } else {
      error("Error! No output file name");
    }
  }

  if (argv.r != null) {
    code.to(".temp");
    shell.exec("coffee .temp", function() {
      return console.log("done");
    });
  }

}).call(this);
