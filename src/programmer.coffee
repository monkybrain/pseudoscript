class Programmer

  capitalize: (string) ->
    string = string[0].toUpperCase() + string[1..]

  constructor: (map) ->
    @map = map

  process: (script) ->

    # Empty syntax container
    syntax = []

    # Loop throught operations in script
    for operation in script

      verb = operation.verb
      ref = operation.object.ref
      type = @capitalize(operation.object.type)
      object = operation.object
      property = operation.property
      value = operation.value

      if verb is 'create'

        # Add autogenerated comment
        syntax.push "\n# Create #{type} called '#{ref}'"

        # Add code
        syntax.push "new #{type}('#{ref}')"

      if verb is 'set'

        # Add autogenerated comment
        syntax.push "\n# Set the property '#{property}' of '#{ref}' to #{value}"

        # Add code
        syntax.push "#{type}.get('#{ref}').set('#{property}', #{value})"

      if verb is 'increase'

        # Add autogenerated comment
        syntax.push "\n# Increasing the property '#{property}' of '#{ref}' by #{value}"

        # Add code
        syntax.push "#{type}.get('#{ref}').inc('#{property}', #{value})"

    syntax.join "\n"

  wrap: (code) ->
    output = []
    output.push "map = require './map'"
    output.push "Room = map.Room"
    output.push "Light = map.Light"
    output.push code
    output.join "\n"

module.exports = Programmer