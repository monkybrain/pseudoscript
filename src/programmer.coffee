class Programmer

  constructor: (map) ->
    @map = map

  capitalize: (string) ->
    string = string[0].toUpperCase() + string[1..]

  indent: (string) ->
    "  #{string}"

  process: (script) ->

    # Empty syntax container
    syntax = []

    # Loop throught operations in script
    for operation in script

      verb = operation.verb
      ref = operation.object.ref
      # TYPE: Capitalize (for Class name) - TODO: BEAUTIFY!
      type = @capitalize(operation.object.type)
      object = operation.object
      property = operation.property
      # VALUE: If not number -> add quotes
      value = if isNaN operation.value then "'#{operation.value}'" else operation.value

      if verb is 'create'

        # Add autogenerated comment
        syntax.push "\n  # Create #{type} called '#{ref}'"

        # Add code
        syntax.push "  new #{type}('#{ref}', photon)"

      if verb is 'set'

        # Add autogenerated comment
        syntax.push "\n  # Set the property '#{property}' of '#{ref}' to #{value}"

        # Add code
        syntax.push "  #{type}.get('#{ref}').set('#{property}', #{value})"

        # Chain promises!
        syntax.push "\n.then () ->\n"

      if verb is 'increase'

        # Add autogenerated comment
        syntax.push "\n  # Increasing the property '#{property}' of '#{ref}' by #{value}"

        # Add code
        syntax.push "  #{type}.get('#{ref}').inc('#{property}', #{value}).then () ->"

        # Chain promises!
        syntax.push "\n.then () ->\n"

      if verb is 'decrease'

        # Add autogenerated comment
        syntax.push "\n  # Decreasing the property '#{property}' of '#{ref}' by #{value}"

        # Add code
        syntax.push "  #{type}.get('#{ref}').dec('#{property}', #{value}).then () ->"

        # Chain promises!
        syntax.push "\n.then () ->\n"

      if verb is 'do'

        # Add autogenerated comment TODO: FIX SO THIS ACTUALLY REFLECTS THE ACTION!
        syntax.push "\n  # Blink #{value} times"

        # Add code
        syntax.push "  #{type}.get('#{ref}').do('blink', #{value})"

        # Chain promises!
        syntax.push "\n.then () ->\n"

      if verb is 'log'

        # Add autogenerated comment TODO: FIX SO THIS ACTUALLY REFLECTS THE ACTION!
        syntax.push "\n  # Logging"

        # Add code
        syntax.push "  console.log #{type}.get('#{ref}')"

        # Chain promises!
        syntax.push "\n.then () ->\n"

    syntax.join "\n"

  wrap: (code) ->
    output = []
    output.push "map = require './map'"
    output.push "Room = map.Room"
    output.push "Light = map.Light\n"
    output.push "Photon = require './photon'"
    output.push "photon = new Photon()\n"
    output.push "console.log '# Running script #'"

    output.push "photon.connect()\n.then () ->"
    output.push code
    output.push @indent "console.log '# End of script #'"
    output.join "\n"

module.exports = Programmer