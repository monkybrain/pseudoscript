// Generated by CoffeeScript 1.10.0
(function() {
  var Module, SensorTag, Shaker, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Module = require("./module");

  SensorTag = require("sensortag");

  util = require("util");

  Shaker = (function(superClass) {
    extend(Shaker, superClass);

    Shaker.self = 'Shaker';

    Shaker.lexical = {
      base: 'shaker',
      plural: 'shakers'
    };

    Shaker.members = [];

    Shaker.properties = null;

    Shaker.events = {
      'start': function() {
        return console.log("start");
      },
      'stop': function() {
        return console.log("stop");
      }
    };

    Shaker.actions = {
      'connect': null
    };

    function Shaker(ref1) {
      this.ref = ref1;
      this.tag = null;
      this.events = Shaker.events;
      this.connected = false;
      Shaker.members.push(this);
    }

    Shaker["do"] = function(ref, action) {
      return new Promise(function(resolve, reject) {
        var i, len, member, ref1, results;
        if (action === 'connect') {
          console.log("Connecting '" + ref + "'...");
          ref1 = Shaker.members;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            member = ref1[i];
            if (member.ref === ref) {
              results.push(SensorTag.discover(function(tag) {
                console.log(tag);
                if (tag.type === 'cc2650') {
                  member.tag = tag;
                  return member.tag.connectAndSetUp(function(err) {
                    if (err != null) {
                      console.error(err && process.exit());
                    }
                    member.tag.enableAccelerometer(function(err) {});
                    if (err != null) {
                      console.error(err && process.exit());
                    }
                    return member.tag.setAccelerometerPeriod(200, function(err) {
                      if (err != null) {
                        console.error(err && process.exit());
                      }
                      return member.tag.notifyAccelerometer(function(err) {
                        if (err != null) {
                          console.error(err && process.exit());
                        }
                        member.connected = true;
                        return member.tag.on('accelerometerChange', function(x, y, z) {
                          var axes, movement;
                          console.log(x);
                          axes = [Math.abs(x), Math.abs(y), Math.abs(z)];
                          movement = axes.reduce(function(prev, curr) {
                            return prev + curr;
                          });
                          if (movement > 4) {
                            console.log("movement!");
                            member.events.start();
                          }
                          return resolve();
                        });
                      });
                    });
                  });
                }
              }));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      });
    };

    Shaker.on = function(ref, event, callback) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var i, len, member, ref1, results;
          ref1 = Shaker.members;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            member = ref1[i];
            if (member.ref === ref) {
              member.events[event] = callback;
              setInterval(function() {
                var func;
                func = member.events[event];
                func();
                return func();
              }, 1000);
              results.push(resolve());
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    return Shaker;

  })(Module);

  module.exports = Shaker;


  /*new Shaker 'shaker 1'
   * Shaker.connect 'shaker 1'
  Shaker.on 'shaker 1', 'shake', () -> console.log "blubb"
  .then -> console.log "done"
  
  setTimeout ->
    console.log "Changing callback"
    Shaker.on 'shaker 1', 'shake'
  , 5000
   */

}).call(this);
