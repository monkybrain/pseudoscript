// Generated by CoffeeScript 1.10.0
(function() {
  var Hue, Light, Module, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Module = require("./module");

  Hue = require("./hue");

  util = require("util");

  Light = (function(superClass) {
    extend(Light, superClass);

    Light.self = 'Light';

    Light.lexical = {
      base: 'light',
      plural: 'lights',
      phrases: [
        {
          pattern: 'turn on <object>',
          verb: 'set',
          property: 'on',
          value: true
        }, {
          pattern: 'turn <object> off',
          verb: 'set',
          property: 'on',
          value: true
        }, {
          pattern: 'turn off <object>',
          verb: 'set',
          property: 'on',
          value: false
        }, {
          pattern: 'turn <object> off',
          verb: 'set',
          property: 'on',
          value: false
        }
      ]
    };

    Light.members = [];

    Light.properties = {
      'on': {
        type: 'boolean',
        set: true,
        "default": true
      },
      'color': {
        type: 'string',
        set: true,
        "default": 'white'
      },
      'hue': {
        type: 'number',
        min: 0,
        max: 65500,
        "default": 20000
      },
      'saturation': {
        type: 'number',
        min: 0,
        max: 254,
        "default": 200
      },
      'brightness': {
        type: 'number',
        set: true,
        "default": 100
      }
    };

    function Light(ref) {
      this.ref = ref;
      Hue.ready().then((function(_this) {
        return function() {
          var k, light, ref1, v;
          light = Hue.lights.filter(function(light) {
            return light.attributes.attributes.name === _this.ref;
          })[0];
          _this.id = light.attributes.attributes.id;
          if (light == null) {
            console.error("Error! Hue light '" + _this.ref + "' not found");
            process.exit();
          }
          _this.properties = {};
          ref1 = Light.properties;
          for (k in ref1) {
            v = ref1[k];
            _this.properties[k] = v["default"];
          }
          return Light.members.push(_this);
        };
      })(this));
    }

    Light.prototype.set = function() {
      return console.log(this.id);
    };

    return Light;

  })(Module);

  module.exports = Light;

}).call(this);
