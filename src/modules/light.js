// Generated by CoffeeScript 1.10.0
(function() {
  var Hue, Light, Module, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Module = require("./module");

  Hue = require("./hue");

  util = require("util");

  Light = (function(superClass) {
    extend(Light, superClass);

    function Light(ref) {
      this.ref = ref;
      Hue.ready().then(function() {
        var k, names, ref1, results, v;
        names = Hue.lights.map(function(light) {
          return light.attributes.attributes.name;
        });
        console.log(names);
        this.properties = {};
        ref1 = Light.properties;
        results = [];
        for (k in ref1) {
          v = ref1[k];
          results.push(this.properties[k] = v["default"]);
        }
        return results;
      });
    }

    Light.self = 'Light';

    Light.lexical = {
      base: 'light',
      phrases: [
        {
          pattern: 'turn on <object>',
          verb: 'set',
          property: 'on',
          value: true
        }, {
          pattern: 'turn <object> off',
          verb: 'set',
          property: 'on',
          value: true
        }, {
          pattern: 'turn off <object>',
          verb: 'set',
          property: 'on',
          value: false
        }, {
          pattern: 'turn <object> off',
          verb: 'set',
          property: 'on',
          value: false
        }
      ]
    };

    Light.members = [];

    Light.properties = {
      'on': {
        type: 'boolean',
        set: true,
        "default": true
      },
      'color': {
        type: 'string',
        set: true,
        "default": 'white'
      },
      'brightness': {
        type: 'number',
        set: true,
        "default": 100
      }
    };

    Light.prototype.set = function(property, value) {};

    return Light;

  })(Module);

  module.exports = Light;

}).call(this);
