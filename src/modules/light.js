// Generated by CoffeeScript 1.10.0
var Hue, Light, Module, util,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Module = require("./module");

Hue = require("./hue");

util = require("util");

Light = (function(superClass) {
  extend(Light, superClass);

  Light.self = 'Light';

  Light.lexical = {
    base: 'light',
    plural: 'lights',
    phrases: [
      {
        pattern: 'turn on <object>',
        verb: 'set',
        property: 'on',
        value: true
      }, {
        pattern: 'turn <object> off',
        verb: 'set',
        property: 'on',
        value: true
      }, {
        pattern: 'turn off <object>',
        verb: 'set',
        property: 'on',
        value: false
      }, {
        pattern: 'turn <object> off',
        verb: 'set',
        property: 'on',
        value: false
      }
    ]
  };

  Light.members = [];

  Light.properties = {
    'on': {
      type: 'boolean',
      set: true,
      "default": true
    },
    'color': {
      type: 'string',
      set: true,
      "default": 'white'
    },
    'hue': {
      type: 'number',
      min: 0,
      max: 65500,
      "default": 20000
    },
    'saturation': {
      type: 'number',
      min: 0,
      max: 254,
      "default": 200
    },
    'brightness': {
      type: 'number',
      set: true,
      "default": 100
    }
  };

  function Light(ref) {
    this.ref = ref;
    Hue.ready().then((function(_this) {
      return function() {
        var k, names, ref1, ref2, results, v;
        names = Hue.lights.map(function(light) {
          return light.attributes.attributes.name;
        });
        if (ref1 = _this.ref, indexOf.call(names, ref1) < 0) {
          console.error("Error! Hue light '" + _this.ref + "' not found");
        }
        _this.properties = {};
        ref2 = Light.properties;
        results = [];
        for (k in ref2) {
          v = ref2[k];
          results.push(_this.properties[k] = v["default"]);
        }
        return results;
      };
    })(this));
  }

  Light.prototype.set = function(property, value) {};

  return Light;

})(Module);

module.exports = Light;
