// Generated by CoffeeScript 1.10.0
(function() {
  var Abject, Light, objects,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Abject = (function() {
    function Abject() {
      this.members = [];
    }

    Abject.prototype.set = function(p, value) {
      var key, property;
      property = null;
      for (key in this.properties) {
        if (p === key) {
          property = p;
          break;
        }
      }
      if (!property) {
        return console.error("Invalid property");
      } else {
        if (typeof value === typeof this.properties[property]) {
          return this.properties[property] = value;
        } else {
          return console.error("Invalid value");
        }
      }
    };

    return Abject;

  })();

  Light = (function(superClass) {
    extend(Light, superClass);

    Light.word = 'light';

    Light.properties = {
      'on': false,
      'brightness': 5,
      'timer': 10
    };

    function Light(ref) {
      if (ref != null) {
        this.ref = ref;
      }
      this.properties = Light.properties;
    }

    return Light;

  })(Abject);

  objects = {
    Light: Light
  };


  /*l = new Light()
  l.set 'brightness', 10
  console.log l
   */

  module.exports = objects;

}).call(this);
