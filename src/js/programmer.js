// Generated by CoffeeScript 1.10.0
(function() {
  var Programmer;

  Programmer = (function() {
    function Programmer(map) {
      this.map = map;
    }

    Programmer.prototype.capitalize = function(string) {
      return string = string[0].toUpperCase() + string.slice(1);
    };

    Programmer.prototype.indent = function(string, level) {
      var indent;
      level = level != null ? level : 0;
      indent = Array(level + 1).join(" ");
      return string = indent + string;
    };

    Programmer.prototype.convertTime = function(value, unit) {
      if (unit === 'milliseconds') {
        return value;
      }
      if (unit === 'seconds') {
        return value * 1000;
      }
      if (unit === 'minutes') {
        return value * 1000 * 60;
      }
      if (unit === 'hours') {
        return value * 1000 * 60 * 60;
      }
      if (unit === 'days') {
        return value * 1000 * 60 * 60 * 24;
      }
    };

    Programmer.prototype.process = function(script) {
      var adverb, closeAdverbWithValue, closeEvent, event, i, indent, len, milliseconds, object, operation, property, ref, syntax, type, unit, value, verb;
      syntax = [];
      indent = 2;
      for (i = 0, len = script.length; i < len; i++) {
        operation = script[i];
        if (operation.type === 'adverbial phrase') {
          adverb = operation.adverb;
          if (adverb === 'delay') {
            value = operation.value;
            unit = operation.unit;
            milliseconds = this.convertTime(operation.value, operation.unit);
            syntax.push("\n\n" + this.indent("setTimeout () ->", indent));
            indent += 2;
            closeAdverbWithValue = milliseconds;
          }
          if (adverb === 'interval') {
            value = operation.value;
            unit = operation.unit;
            milliseconds = this.convertTime(operation.value, operation.unit);
            syntax.push("\n\n" + this.indent("setInterval () ->", indent));
            indent += 2;
            closeAdverbWithValue = milliseconds;
          }
        }
        if (operation.type === 'event phrase') {
          event = operation.event;
          syntax.push("\n" + this.indent("photon.on '" + event + "', () ->", indent));
          indent += 2;
          closeEvent = true;
        }
        if (operation.type === 'verb phrase') {
          verb = operation.verb;
          ref = operation.object.ref;
          type = this.capitalize(operation.object.type);
          object = operation.object;
          property = operation.property;
          value = isNaN(operation.value) ? "'" + operation.value + "'" : operation.value;
          if (verb === 'create') {
            syntax.push("\n" + this.indent("# Create " + type + " called '" + ref + "'", indent));
            syntax.push(this.indent("new " + type + "('" + ref + "', photon)", indent));
          }
          if (verb === 'set') {
            syntax.push("\n" + this.indent("# Set the property '" + property + "' of '" + ref + "' to " + value, indent));
            syntax.push(this.indent(type + ".get('" + ref + "').set('" + property + "', " + value + ")", indent));
          }
          if (verb === 'increase') {
            syntax.push("\n" + this.indent("# Increasing the property '" + property + "' of '" + ref + "' by " + value, indent));
            syntax.push(this.indent + (type + ".get('" + ref + "').inc('" + property + "', " + value + ")"), indent);
          }
          if (verb === 'decrease') {
            syntax.push("\n" + this.indent("# Decreasing the property '" + property + "' of '" + ref + "' by " + value, indent));
            syntax.push(this.indent(type + ".get('" + ref + "').dec('" + property + "', " + value + ")", indent));
          }
          if (verb === 'do') {
            syntax.push("\n" + this.indent("# Blink " + value + " times", indent));
            syntax.push(this.indent(type + ".get('" + ref + "').do('blink', " + value + ")", indent));
          }
          if (verb === 'log') {
            syntax.push("\n" + this.indent("# Logging", indent));
            syntax.push(this.indent, "console.log " + type + ".get('" + ref + "')", indent);
          }
        }
      }
      if (closeAdverbWithValue != null) {
        indent -= 2;
        syntax.push("\n" + this.indent(", " + closeAdverbWithValue, indent) + "\n");
      }
      if (closeEvent != null) {
        indent -= 2;
      }
      return syntax.join("\n");
    };

    Programmer.prototype.wrap = function(code) {
      var output;
      output = [];
      output.push("map = require './map'");
      output.push("Room = map.Room");
      output.push("Light = map.Light\n");
      output.push("Photon = require './photon'");
      output.push("photon = new Photon()\n");
      output.push("console.log '# Running script #'");
      output.push("photon.connect()\n.then () ->");
      output.push("  console.log 'Connected!'\n");
      output.push(code);
      return output.join("\n");
    };

    return Programmer;

  })();

  module.exports = Programmer;

}).call(this);
